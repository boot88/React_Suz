// src/App.js
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useAuth } from './context/AuthContext';
import Dashboard from './pages/Dashboard';
import AddApplication from './pages/AddApplication';
import EditApplication from './pages/EditApplicationsTable';
import Login from './pages/Login';
import EmployeeSearch from './pages/EmployeeSearch';
import { ApplicationsProvider } from './context/ApplicationsProvider';
import './App.css';
import { Link } from 'react-router-dom';
import Support from './components/Support';

function App() {
  const { isAuthenticated, isLoading } = useAuth();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  if (isLoading) {
    return (
      <div className="app-loading">
        <div className="spinner"></div>
        <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
      </div>
    );
  }
  
  return (
    <Router>
      <ApplicationsProvider>
        <div className="app-container">
          {/* –°–∞–π–¥–±–∞—Ä —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          {isAuthenticated && <Sidebar />}
          <div className={`app-content ${isAuthenticated ? 'app-content--with-sidebar' : ''}`}>
            <Routes>
              <Route path="/login" element={<Login />} />
              <Route path="/" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
              <Route path="/add" element={<ProtectedRoute><AddApplication /></ProtectedRoute>} />
              <Route path="/edit/:id" element={<ProtectedRoute><EditApplication /></ProtectedRoute>} />
              <Route path="/employee-search" element={<ProtectedRoute><EmployeeSearch /></ProtectedRoute>} />
              <Route path="*" element={<Navigate to="/" replace />} />
			  <Route path="/support" element={<Support />} />
            </Routes>
          </div>
        </div>
      </ApplicationsProvider>
    </Router>
  );
}

function Sidebar() {
  const { logout, user } = useAuth();
  const location = useLocation();
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
      if (window.innerWidth > 768) {
        setIsMobileOpen(false);
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleOverlayClick = () => {
    setIsMobileOpen(false);
  };

  const isActive = (path) => location.pathname === path;

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      {isMobile && (
        <button 
          className="mobile-menu-toggle"
          onClick={() => setIsMobileOpen(!isMobileOpen)}
        >
          ‚ò∞
        </button>
      )}

      {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–æ–±–∏–ª—å–Ω–æ–º –º–µ–Ω—é */}
      {isMobileOpen && isMobile && (
        <div 
          className="sidebar-overlay"
          onClick={handleOverlayClick}
        />
      )}

      <div className={`sidebar ${isMobileOpen ? 'open' : ''}`}>
        <div className="sidebar-header">
          <div className="sidebar-logo">
            <span className="logo-icon">‚öóÔ∏è</span>
          </div>
          <div className="sidebar-title">
            <h2>–ù–ò–û–• –°–∏—Å—Ç–µ–º–∞</h2>
            <p>–£—á—ë—Ç –∑–∞—è–≤–æ–∫</p>
          </div>
        </div>

        <nav className="sidebar-nav">
          <ul>
            <li className={isActive('/') ? 'nav-item active' : 'nav-item'}>
              <Link to="/" className="nav-link" onClick={() => setIsMobileOpen(false)}>
                <span className="nav-icon">üìä</span>
                <span className="nav-text">–î–∞—à–±–æ—Ä–¥</span>
              </Link>
            </li>
            <li className={isActive('/add') ? 'nav-item active' : 'nav-item'}>
              <Link to="/add" className="nav-link" onClick={() => setIsMobileOpen(false)}>
                <span className="nav-icon">‚ûï</span>
                <span className="nav-text">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</span>
              </Link>
            </li>
            <li className={isActive('/edit/0') ? 'nav-item active' : 'nav-item'}>
              <Link to="/edit/0" className="nav-link" onClick={() => setIsMobileOpen(false)}>
                <span className="nav-icon">‚úèÔ∏è</span>
                <span className="nav-text">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
              </Link>
            </li>
            <li className={isActive('/employee-search') ? 'nav-item active' : 'nav-item'}>
              <Link to="/employee-search" className="nav-link" onClick={() => setIsMobileOpen(false)}>
                <span className="nav-icon">üë•</span>
                <span className="nav-text">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</span>
              </Link>
            </li>
          </ul>
        </nav>

        <div className="sidebar-footer">
          <div className="user-info">
            <div className="user-avatar">
              <span className="user-icon">üë§</span>
            </div>
            <div className="user-details">
              <span className="user-name">{user?.name || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}</span>
              <span className="user-role">{user?.role || '–ù–∞—É—á–Ω—ã–π –æ—Ç–¥–µ–ª'}</span>
            </div>
          </div>
          <button onClick={() => { logout(); setIsMobileOpen(false); }} className="logout-btn">
            <span className="logout-icon">üö™</span>
            <span>–í—ã—Ö–æ–¥</span>
          </button>
        </div>
      </div>
    </>
  );
}

function ProtectedRoute({ children }) {
  const { isAuthenticated, isLoading } = useAuth();
  
  if (isLoading) {
    return (
      <div className="app-loading">
        <div className="spinner"></div>
        <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</p>
      </div>
    );
  }
  
  return !isAuthenticated ? <Navigate to="/login" replace /> : children;
}

export default App;